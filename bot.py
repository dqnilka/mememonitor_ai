import asyncio
import logging
import pandas as pd
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from twitter_parser import collect_tweets
from sentiment_model import predict_sentiment

API_TOKEN = ""

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

analysis_settings = {
    "date": "2025-01-22",
    "tweet_count": 100,
    "results": None,
    "keyword": None,
}

class AnalyzeStates(StatesGroup):
    awaiting_keyword = State()
    awaiting_tweet_count = State()


@dp.message(Command("start"))
async def start(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤"), KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
            [KeyboardButton(text="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=keyboard
    )


@dp.message(lambda message: message.text == "üîç –ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤")
async def analyze(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, $coby):", reply_markup=keyboard)
    await state.set_state(AnalyzeStates.awaiting_keyword)


@dp.message(StateFilter(AnalyzeStates.awaiting_keyword))
async def get_keyword(message: Message, state: FSMContext):
    keyword = message.text
    analysis_settings["keyword"] = keyword
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True
    )
    await message.answer(f"–°–∫–æ–ª—å–∫–æ —Ç–≤–∏—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {analysis_settings['tweet_count']})", reply_markup=keyboard)
    await state.set_state(AnalyzeStates.awaiting_tweet_count)


@dp.message(StateFilter(AnalyzeStates.awaiting_tweet_count))
async def get_tweet_count(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        analysis_settings["tweet_count"] = count
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (100).")
        analysis_settings["tweet_count"] = 100

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –Ø —Å–æ–±–∏—Ä–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–∏—Ç—ã...")
    tweets = collect_tweets(analysis_settings["keyword"], analysis_settings["date"], analysis_settings["tweet_count"])

    if not tweets:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ç–≤–∏—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    results = []
    positive, negative = 0, 0
    for tweet in tweets:
        sentiment = predict_sentiment(tweet["tweet"], "./bert_sentiment_model")
        if sentiment == 1:
            positive += 1
        else:
            negative += 1
        results.append({"tweet": tweet["tweet"], "sentiment": "positive" if sentiment == 1 else "negative"})

    analysis_settings["results"] = results

    total = positive + negative
    positive_pct = (positive / total) * 100
    negative_pct = (negative / total) * 100

    await message.answer(
        f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
        f"‚ûï –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {positive_pct:.2f}%\n"
        f"‚ûñ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {negative_pct:.2f}%\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ç–≤–∏—Ç–æ–≤.\n"
        "2. üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç."
    )
    await state.clear()


@dp.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤"), KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
            [KeyboardButton(text="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True
    )
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard)
    await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
