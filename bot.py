import asyncio
import logging
import pandas as pd
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from twitter_parser import collect_tweets
from sentiment_model import predict_sentiment
from datetime import datetime


API_TOKEN = "7943152874:AAEblbvPHqmZH_Uj0gxL-04KkJx3k3kGq-g"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AnalyzeStates(StatesGroup):
    awaiting_keyword = State()
    awaiting_date = State()


@dp.message(Command("start"))
async def start(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤"), KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@dp.message(lambda message: message.text == "üîç –ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤")
async def analyze(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    await state.set_state(AnalyzeStates.awaiting_keyword)


@dp.message(StateFilter(AnalyzeStates.awaiting_keyword))
async def get_keyword(message: Message, state: FSMContext):
    keyword = message.text
    await state.update_data(keyword=keyword)
    current_month = datetime.now().strftime("%Y-%m")
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({current_month}-DD):")
    await state.set_state(AnalyzeStates.awaiting_date)


@dp.message(StateFilter(AnalyzeStates.awaiting_date))
async def get_date(message: Message, state: FSMContext):
    try:
        date = message.text
        datetime.strptime(date, "%Y-%m-%d")
        if not date.startswith(datetime.now().strftime("%Y-%m")):
            raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞.")
        await state.update_data(date=date)

        data = await state.get_data()
        keyword = data["keyword"]

        await message.answer(f"–°–æ–±–∏—Ä–∞—é —Ç–≤–∏—Ç—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}' –∑–∞ {date}.")

        # –°–±–æ—Ä —Ç–≤–∏—Ç–æ–≤
        tweets = collect_tweets(keyword, date)
        if not tweets:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ç–≤–∏—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        # –ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤
        sentiment_map = {
            "positive": 0,
            "negative": 1,
            "raid": 2,
            "indirect_mention": 3,
            "mention": 3  # –û–±—Ä–∞–±–æ—Ç–∫–∞ "mention" –∫–∞–∫ "indirect_mention"
        }

        results = []
        positive, negative, raid, indirect_mention = 0, 0, 0, 0

        for tweet in tweets:
            sentiment = predict_sentiment(tweet["tweet"], "./bert_sentiment_model")
            if sentiment in sentiment_map:
                sentiment_label = sentiment
                results.append({"tweet": tweet["tweet"], "sentiment": sentiment_label})

                if sentiment_label == "positive":
                    positive += 1
                elif sentiment_label == "negative":
                    negative += 1
                elif sentiment_label == "raid":
                    raid += 1
                elif sentiment_label in ["indirect_mention", "mention"]:
                    indirect_mention += 1
            else:
                logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sentiment: {sentiment}")

        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tweets = len(tweets)
        interest_index = round((positive * 0.6 + raid * 0.3 + indirect_mention * 0.1) / total_tweets, 2) if total_tweets else 0

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_data = {
            "keyword": keyword,
            "date": date,
            "total_tweets": total_tweets,
            "positive": positive,
            "negative": negative,
            "raid": raid,
            "indirect_mention": indirect_mention,
            "interest_index": interest_index
        }
        history_df = pd.DataFrame([history_data])
        if not pd.io.common.file_exists("history.csv"):
            history_df.to_csv("history.csv", index=False)
        else:
            existing_df = pd.read_csv("history.csv")
            combined_df = pd.concat([existing_df, history_df], ignore_index=True)
            combined_df.to_csv("history.csv", index=False)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n"
            f"üìã –í—Å–µ–≥–æ —Ç–≤–∏—Ç–æ–≤: {total_tweets}\n"
            f"‚ûï –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {positive} ({(positive / total_tweets * 100):.2f}%)\n"
            f"‚ûñ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {negative} ({(negative / total_tweets * 100):.2f}%)\n"
            f"üéØ –†–µ–π–¥–æ–≤—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {raid} ({(raid / total_tweets * 100):.2f}%)\n"
            f"üì¢ –ö–æ—Å–≤–µ–Ω–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {indirect_mention} ({(indirect_mention / total_tweets * 100):.2f}%)\n\n"
            f"üìà –ò–Ω–¥–µ–∫—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: {interest_index}"
        )

        await state.clear()

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message(lambda message: message.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
async def show_results(message: Message):
    try:
        df = pd.read_csv("history.csv")
        if df.empty:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
            return

        history = df.tail(5).to_dict(orient="records")
        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
        for entry in history:
            response += (
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                f"üìã –í—Å–µ–≥–æ —Ç–≤–∏—Ç–æ–≤: {entry['total_tweets']}\n"
                f"‚ûï –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {entry['positive']} ({(entry['positive'] / entry['total_tweets'] * 100):.2f}%)\n"
                f"‚ûñ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {entry['negative']} ({(entry['negative'] / entry['total_tweets'] * 100):.2f}%)\n"
                f"üéØ –†–µ–π–¥–æ–≤—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {entry['raid']} ({(entry['raid'] / entry['total_tweets'] * 100):.2f}%)\n"
                f"üì¢ –ö–æ—Å–≤–µ–Ω–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {entry['indirect_mention']} ({(entry['indirect_mention'] / entry['total_tweets'] * 100):.2f}%)\n\n"
                f"üìà –ò–Ω–¥–µ–∫—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: {entry['interest_index']}\n\n"
            )

        await message.answer(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
