import asyncio
import logging
import pandas as pd
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from twitter_parser import collect_tweets
from sentiment_model import predict_sentiment
from datetime import datetime

API_TOKEN = "7684239570:AAFqFCKUQOTVbvUgXs3zIHDbyoqBMscIu_k"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

analysis_settings = {
    "date": None,
    "tweet_count": None,
    "keyword": None,
}

class AnalyzeStates(StatesGroup):
    awaiting_keyword = State()
    awaiting_date = State()
    awaiting_tweet_count = State()

@dp.message(Command("start"))
async def start(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ 'üîç –ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.text == "üîç –ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤")
async def analyze(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    await state.set_state(AnalyzeStates.awaiting_keyword)

@dp.message(StateFilter(AnalyzeStates.awaiting_keyword))
async def get_keyword(message: Message, state: FSMContext):
    analysis_settings["keyword"] = message.text
    current_month = datetime.now().strftime("%Y-%m")
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({current_month}-DD):")
    await state.set_state(AnalyzeStates.awaiting_date)

@dp.message(StateFilter(AnalyzeStates.awaiting_date))
async def get_date(message: Message, state: FSMContext):
    try:
        date = message.text
        datetime.strptime(date, "%Y-%m-%d")
        if not date.startswith(datetime.now().strftime("%Y-%m")):
            raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞.")
        analysis_settings["date"] = date
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        await state.set_state(AnalyzeStates.awaiting_tweet_count)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(StateFilter(AnalyzeStates.awaiting_tweet_count))
async def get_tweet_count(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if count <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        analysis_settings["tweet_count"] = count
        await message.answer(f"–°–æ–±–∏—Ä–∞—é —Ç–≤–∏—Ç—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{analysis_settings['keyword']}' –∑–∞ {analysis_settings['date']}.")

        tweets = collect_tweets(analysis_settings["keyword"], analysis_settings["date"], analysis_settings["tweet_count"])

        if not tweets:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ç–≤–∏—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        positive, negative = 0, 0
        for tweet in tweets:
            sentiment = predict_sentiment(tweet["tweet"], "./bert_sentiment_model")
            if sentiment == 1:
                positive += 1
            else:
                negative += 1

        await message.answer(
            f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            f"–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {positive}\n"
            f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {negative}\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤ –≤ 'collected_tweets.csv'."
        )
        await state.clear()
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
